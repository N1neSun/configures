		"基础设置
set nocompatible		"不兼容vi
set nu
set ruler
set incsearch		"逐字高亮搜索
set matchtime=5		"高亮的时间
syntax enable		"语法高亮
set history=500  	"vim记住的历史操作的数量，默认的是20
set go=
set wildmenu		
set nofen
set fdl=10			 "始终启用鼠标
set mouse=a
		" 状态条，显示字节数，列数，行数，当前行等信息	
"set statusline=%F%m%r%h%w/ [FORMAT=%{&ff}]/ [TYPE=%Y]/ [ASCII=/%03.3b]/ [HEX=/%02.2B]/ [POS=%04l,%04v][%p%%]/ [LEN=%L]  
"set laststatus=2 	"always show the status line  
"set shortmess=atI	"去掉欢迎界面
"set lines=28  columns=200		"窗口大小
"colorscheme desert				"主题
"set textwidth=80				"文本行的长度，需要开启自动换行
"set cursorline					"高亮当前
		"字符编码"
set fileencodings=utf-8,gbk,gb2312,cp936
set fileencoding=utf-8		"可以不用设置
"set encoding=utf-8			"设置状态栏的编码，可以不设置
autocmd filetype txt set spell			"对txt文档的英文进行语法检查
"set spell								"开启拼写检查
" 基于缩进或语法进行折叠
"set foldmethod=indent
set foldmethod=syntax
"启动vim时关闭代码折叠
"set nofoldenable
		"没明白的设置
filetype on		"侦测文件类型

"===========================================================
"gvim的设置在.gvimrc中
"===========================================================
"set guifont=Consolas:h12		"字体中有空格用\来转意,这条是win下的写法


		"关于C语言的设置
set cindent					"C语言缩进
"set list listchars=tab:>-	"可视化tab键
set noexpandtab				"不用空格替代tab,(%retab!空格转换为tab)
set autoindent				"继承上一缩进
set si						"智能缩进
set tabstop=4 shiftwidth=4	"shiftwidth自动tab宽度
autocmd filetype xhtml set tabstop=2 shiftwidth=2
autocmd filetype html set tabstop=2 shiftwidth=2
autocmd filetype lisp set nocindent autoindent si
"autocmd filetype c set tabstop=4 shiftwidth=4
"autocmd filetype h set tabstop=4 shiftwidth=4
"autocmd filetype c++ set tabstop=4 shiftwidth=4
"autocmd filetype py set noexpandtab tabstop=4 shiftwidth=4
set completeopt=menu		"补全不显示草稿窗口

"<F3>实现sdcv快捷查询
function! Mydict()
	let expl=system('sdcv -n ' .
	\  expand("<cword>"))
	windo if
	\ expand("%")=="diCt-tmp" |
	\ q!|endif
	30vsp diCt-tmp
	setlocal buftype=nofile bufhidden=hide noswapfile
	1s/^/\=expl/
	1
endfunction
nmap <F3> :call Mydict()<CR>

"<F4>编译"
map <F4> : call Compile()<CR>
func! Compile()
	exec "w"
	if &filetype == 'c'				"c
		exec "!clear"
		exec "!gcc -o '%<' '%' -ansi -Wall -lm"
	elseif &filetype == 'java'		"java
		exec "!clear"
		exec "!javac '%'"
	elseif &filetype == 'asm'		"汇编
		exec "!clear"
		exec "!as '%' -o '%<.o' && ld '%<.o' -o '%<'"
	elseif &filetype == 'cs'		"c_sharp
		exec "!clear!"
		exec "!gmcs '%'"
	else
		exec ""
	endif
endfunc


"<F5>编译运行"
map <F5> : call CompileRun()<CR>
func! CompileRun()
	exec "w"
	if &filetype == 'xhtml' || &filetype == 'html'	"html
		exec "!clear"
		exec "!firefox '%'"
	elseif &filetype == 'c'		"c
		exec "!clear"
		exec "!gcc -o '%<' '%' -Wall -ansi -lm"
		exec "! ./%<"
	elseif &filetype == 'java'	"java
		exec "!clear"
		exec "!javac '%'"
		exec "!java '%<'"
	elseif &filetype == 'asm'	"汇编
		exec "!clear"
		exec "!as '%' -o '%<.o' && ld '%<.o' -o '%<'"
		exec "!./'%<'"
	elseif &filetype == 'cs'	"c_sharp
		exec "!clear"
		exec "!gmcs '%'"
		exec "!./'%<.exe'"
	else
		exec ""
	endif
endfunc

"<F6>运行"
map <F6> : call Run()<CR>
func! Run()
	exec "w"
	"C或者汇编
	if &filetype == 'c' || &filetype == 'asm'
		exec "!clear"
		exec "!./'%<'"
	elseif &filetype == 'java'	"java
		exec "!clear"
		exec "!java '%<'"
	elseif &filetype == 'cs'	"c_sharp
		exec "!clear"
		exec "!./'%<.exe'"
	else
		exec ""
	endif
endfunc

"C语言调试"
map <F7> : call GDB()<CR>
func! GDB()
	exec "w"
	if &filetype == 'c'			"c
		exec "!clear"
		exec "!gcc -o %< % -g -ansi -lm"
		exec "!gdb %<"
	elseif &filetype == 'asm'	"汇编
		exec "!clear"
		exec "!as % -g -o %<.o && ld %<.o -o %<"
		exec "!gdb %<"
	elseif &filetype == 'java'	"java
		exec "!clear"
		exec "!javac -g '%'"
		exec "!jdb '%<'"
	else 
		exec ""
	endif
endfunc

"生成tags和cscope
map <F8> : call C_ctags_cs()<CR>
func! C_ctags_cs()
	if &filetype == 'c'			"只对c实行生成ctags
		exec "!ctags -R"
	endif
endfunc

"使用vbundle来管理插件
"启动智能补全
filetype plugin indent on     
set rtp+=~/.vim/bundle/vundle/  
call vundle#rc()  
"required!   
Bundle 'gmarik/vundle'  
"original repos on github
Bundle 'tpope/vim-fugitive'
""快速移动
"Bundle 'Lokaltog/vim-easymotion'
Bundle 'tpope/vim-rails.git'
"vim-scripts repos
Bundle 'L9'
Bundle 'FuzzyFinder'
""powerline
"Bundle 'https://github.com/Lokaltog/vim-powerline.git'
"vim-airline 一个简化的powerline
Bundle 'bling/vim-airline'		
""vim中打开终端，没什么用:(
"Bundle 'https://github.com/oplatek/Conque-Shell'
"HTML自动补全
Bundle 'HTML-AutoCloseTag'
"emmet html/css补全
Bundle 'mattn/emmet-vim'
"NERD commenter,下面的AuthorInfo需要
Bundle 'https://github.com/scrooloose/nerdcommenter'
"添加作者信息
Bundle 'https://github.com/vim-scripts/AuthorInfo'
"...
"下面是vundle使用命令
":BundleList			--list configured bundles
":BundleInstall(!)		--install(update) bundles
":BundleSearch(!) foo	--search(or refresh cache first) for foo
":BundleClean(!)		--confirm(or auto-approve) removal of unused bundles
"see ':h vundle' for more details or wiki for FAQ


"taglist插件
let Tlist_Compact_Format=1	"不显示<F1>to display help
let Tlist_Show_One_File=1
let Tlist_Exit_OnlyWindow=2
"使用winmanager把TagList和netrw整合起来
let g:winManagerWindowLayout='FileExplorer|TagList'
nmap wm :WMToggle<cr>
"USE: 在普通模式下输入 vm

"cscope配置
set cscopequickfix=s-,c-,d-,i-,t-,e-
"使用同ctags，cscope -Rbq
"添加数据库
if filereadable("cscope.out")
	cs add cscope.out
elseif "$CSCOPE_DB" != ""
	cs add "$CSCOPE_DB"
endif
""USE:
"nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>f :cs find f <C-R>=expand("<cword>")<CR><CR>
"nmap <C-@>i :cs find i ^<C-R>=expand("<cword>")<CR>$<CR>
"nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>
""===end cscope===

"set completeopt=longest,menu
"下面是使用了supertab插件来优化补全
"let g:SuperTabRetainCompletionType=2
" 0 - 不记录上次的补全方式
" 1 - 记住上次的补全方式,直到用其他的补全命令改变它
" 2 - 记住上次的补全方式,直到按ESC退出插入模式为止

"let g:SuperTabDefaultCompletionType="<C-X><C-O>"
" 设置按下<Tab>后默认的补全方式, 默认是<C-P>,
" 现在改为<C-X><C-O>. 关于<C-P>的补全方式,
" USE:
" 	:help ins-completion
" 	:help compl-omni
"===end 补全===

"powerline-status配置
"set laststatus=2
"set t_Co=256
"let g:Powerline_symbols = 'unicode'
""let g:Powerline_symbols = 'fancy'

"下面是vim-airline的配置
if !exists('g:airlne_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"
let g:airline_powerline_fonts = 1
let g:bufferline_echo = 0
set laststatus=2
set t_Co=256

"ConqueTerm控制台
"NOTE:	没有使用
"<F9> 	将选中文本发送到Conque-Shell
"<F10> 	将当前所有文本发送到Conque-Shell中
"<F11> 	如果当前编辑文件可执行，则打开新的Conque-Shell并运行
"		但是会有快捷键冲突

"emmet配置和使用
let g:user_emmet_install_global=0
autocmd Filetype html,css "EmmetInstall
"USE:
"使用方法在http://blog.wpjam.com/m/emmet-grammar/

"NERD_commenter 配置和使用
"let loaded_nerd_comments=1
"let mapleader='\'
"let g:mapleader='\'
"上面还不会使用:(

"AuthorInfo使用,<F2>添加
let g:vimrc_author='leetking'
let g:vimrc_email='li_Tking@163.com'
let g:vimrc_homepage=''
nmap <F2> :AuthorInfoDetect<cr>

"c语言模板插入
iab chead #include <stdio.h><CR><CR>int main(int argc, char **argv)<CR>{<CR>return 0;<CR>}<CR>
iab cshead using System;<CR>using System.Collections.Generic;<CR>using System.Text;<CR>


